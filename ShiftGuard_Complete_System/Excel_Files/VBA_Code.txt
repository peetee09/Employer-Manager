===================================================================
SHIFTGUARD VBA MACRO CODE
===================================================================

Instructions: Copy and paste this code into the VBA Editor in Excel
1. Press Alt+F11 to open VBA Editor
2. Insert > Module
3. Paste all code below
4. Save as .xlsm (macro-enabled workbook)

===================================================================

' ===================================================================
' MODULE: ShiftGuardMacros
' PURPOSE: Employee Time Tracking System Automation
' ===================================================================

Option Explicit

' ===================================================================
' MACRO: UploadBiometricData
' PURPOSE: Import biometric data from CSV files
' ===================================================================
Sub UploadBiometricData()
    Dim wsData As Worksheet
    Dim filePath As String
    Dim fileDialog As fileDialog
    Dim textLine As String
    Dim dataArray() As String
    Dim lastRow As Long
    Dim rowNum As Long
    Dim fileNum As Integer
    
    On Error GoTo ErrorHandler
    
    ' Set reference to BiometricData sheet
    Set wsData = ThisWorkbook.Sheets("BiometricData")
    
    ' Create file dialog
    Set fileDialog = Application.fileDialog(msoFileDialogFilePicker)
    With fileDialog
        .Title = "Select Biometric Data CSV File"
        .Filters.Clear
        .Filters.Add "CSV Files", "*.csv"
        .AllowMultiSelect = False
        
        If .Show = -1 Then
            filePath = .SelectedItems(1)
        Else
            MsgBox "No file selected. Upload cancelled.", vbInformation
            Exit Sub
        End If
    End With
    
    ' Find last row with data
    lastRow = wsData.Cells(wsData.Rows.Count, 1).End(xlUp).Row
    
    ' Open and read CSV file
    fileNum = FreeFile
    Open filePath For Input As #fileNum
    
    ' Skip header line
    Line Input #fileNum, textLine
    
    ' Read data
    rowNum = lastRow + 1
    Do Until EOF(fileNum)
        Line Input #fileNum, textLine
        dataArray = Split(textLine, ",")
        
        ' Write data to sheet
        If UBound(dataArray) >= 7 Then
            wsData.Cells(rowNum, 1).Value = Trim(dataArray(0))  ' Employee ID
            wsData.Cells(rowNum, 2).Value = Trim(dataArray(1))  ' Date
            wsData.Cells(rowNum, 3).Value = Trim(dataArray(2))  ' Clock-In
            wsData.Cells(rowNum, 4).Value = Trim(dataArray(3))  ' Clock-Out
            wsData.Cells(rowNum, 5).Value = Trim(dataArray(4))  ' Tea Break
            wsData.Cells(rowNum, 6).Value = Trim(dataArray(5))  ' Lunch Break
            wsData.Cells(rowNum, 7).Value = Trim(dataArray(6))  ' Department
            wsData.Cells(rowNum, 8).Value = Trim(dataArray(7))  ' Shift Type
            
            rowNum = rowNum + 1
        End If
    Loop
    
    Close #fileNum
    
    ' Update status
    UpdateSystemStatus "Data Upload", Now
    
    ' Refresh calculations
    Call UpdateDashboard
    
    MsgBox "Data imported successfully!" & vbCrLf & _
           "Records added: " & (rowNum - lastRow - 1), vbInformation, "Upload Complete"
    
    Exit Sub
    
ErrorHandler:
    Close #fileNum
    MsgBox "Error uploading data: " & Err.Description, vbCritical, "Upload Error"
End Sub

' ===================================================================
' MACRO: GenerateAutomatedReport
' PURPOSE: Create automated reports for selected period
' ===================================================================
Sub GenerateAutomatedReport()
    Dim wsCalc As Worksheet
    Dim wsReport As Worksheet
    Dim startDate As Date
    Dim endDate As Date
    Dim lastRow As Long
    Dim i As Long
    Dim reportRow As Long
    
    On Error GoTo ErrorHandler
    
    ' Get date range from user
    startDate = InputBox("Enter start date (YYYY-MM-DD):", "Report Date Range")
    endDate = InputBox("Enter end date (YYYY-MM-DD):", "Report Date Range")
    
    If Not IsDate(startDate) Or Not IsDate(endDate) Then
        MsgBox "Invalid date format. Please use YYYY-MM-DD format.", vbExclamation
        Exit Sub
    End If
    
    ' Create or clear report sheet
    On Error Resume Next
    Set wsReport = ThisWorkbook.Sheets("Report")
    If wsReport Is Nothing Then
        Set wsReport = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsReport.Name = "Report"
    Else
        wsReport.Cells.Clear
    End If
    On Error GoTo ErrorHandler
    
    Set wsCalc = ThisWorkbook.Sheets("Calculations")
    
    ' Create report headers
    With wsReport
        .Cells(1, 1).Value = "ShiftGuard Employee Report"
        .Cells(1, 1).Font.Bold = True
        .Cells(1, 1).Font.Size = 14
        .Cells(2, 1).Value = "Period: " & Format(startDate, "DD-MMM-YYYY") & " to " & Format(endDate, "DD-MMM-YYYY")
        .Cells(2, 1).Font.Italic = True
        
        .Cells(4, 1).Value = "Employee ID"
        .Cells(4, 2).Value = "Date"
        .Cells(4, 3).Value = "Worked Hours"
        .Cells(4, 4).Value = "Lost Time"
        .Cells(4, 5).Value = "Overtime"
        .Cells(4, 6).Value = "Status"
        
        ' Format headers
        .Range("A4:F4").Font.Bold = True
        .Range("A4:F4").Interior.Color = RGB(68, 114, 196)
        .Range("A4:F4").Font.Color = RGB(255, 255, 255)
    End With
    
    ' Copy filtered data to report
    lastRow = wsCalc.Cells(wsCalc.Rows.Count, 1).End(xlUp).Row
    reportRow = 5
    
    For i = 2 To lastRow
        If IsDate(wsCalc.Cells(i, 2).Value) Then
            If wsCalc.Cells(i, 2).Value >= startDate And wsCalc.Cells(i, 2).Value <= endDate Then
                wsReport.Cells(reportRow, 1).Value = wsCalc.Cells(i, 1).Value
                wsReport.Cells(reportRow, 2).Value = wsCalc.Cells(i, 2).Value
                wsReport.Cells(reportRow, 3).Value = wsCalc.Cells(i, 3).Value
                wsReport.Cells(reportRow, 4).Value = wsCalc.Cells(i, 4).Value
                wsReport.Cells(reportRow, 5).Value = wsCalc.Cells(i, 5).Value
                wsReport.Cells(reportRow, 6).Value = wsCalc.Cells(i, 8).Value
                reportRow = reportRow + 1
            End If
        End If
    Next i
    
    ' Auto-fit columns
    wsReport.Columns("A:F").AutoFit
    
    ' Activate report sheet
    wsReport.Activate
    
    MsgBox "Report generated successfully with " & (reportRow - 5) & " records.", vbInformation, "Report Complete"
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error generating report: " & Err.Description, vbCritical, "Report Error"
End Sub

' ===================================================================
' MACRO: ExportDataToCSV
' PURPOSE: Export processed data to CSV format
' ===================================================================
Sub ExportDataToCSV()
    Dim wsCalc As Worksheet
    Dim filePath As String
    Dim fileNum As Integer
    Dim lastRow As Long
    Dim i As Long
    Dim line As String
    
    On Error GoTo ErrorHandler
    
    Set wsCalc = ThisWorkbook.Sheets("Calculations")
    
    ' Get save location from user
    filePath = Application.GetSaveAsFilename( _
        InitialFileName:="ShiftGuard_Export_" & Format(Now, "YYYYMMDD") & ".csv", _
        FileFilter:="CSV Files (*.csv), *.csv", _
        Title:="Export Data to CSV")
    
    If filePath = "False" Then
        MsgBox "Export cancelled.", vbInformation
        Exit Sub
    End If
    
    ' Open file for writing
    fileNum = FreeFile
    Open filePath For Output As #fileNum
    
    ' Write header
    Print #fileNum, "Employee ID,Date,Worked Hours,Lost Time,Overtime,Night Hours,Utilization %,Status"
    
    ' Write data
    lastRow = wsCalc.Cells(wsCalc.Rows.Count, 1).End(xlUp).Row
    For i = 2 To lastRow
        If wsCalc.Cells(i, 1).Value <> "" Then
            line = wsCalc.Cells(i, 1).Value & "," & _
                   wsCalc.Cells(i, 2).Value & "," & _
                   wsCalc.Cells(i, 3).Value & "," & _
                   wsCalc.Cells(i, 4).Value & "," & _
                   wsCalc.Cells(i, 5).Value & "," & _
                   wsCalc.Cells(i, 6).Value & "," & _
                   wsCalc.Cells(i, 7).Value & "," & _
                   wsCalc.Cells(i, 8).Value
            Print #fileNum, line
        End If
    Next i
    
    Close #fileNum
    
    MsgBox "Data exported successfully to:" & vbCrLf & filePath, vbInformation, "Export Complete"
    
    Exit Sub
    
ErrorHandler:
    Close #fileNum
    MsgBox "Error exporting data: " & Err.Description, vbCritical, "Export Error"
End Sub

' ===================================================================
' MACRO: UpdateDashboard
' PURPOSE: Refresh all calculations and dashboard metrics
' ===================================================================
Sub UpdateDashboard()
    On Error GoTo ErrorHandler
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationAutomatic
    
    ' Force recalculation
    ThisWorkbook.Sheets("Calculations").Calculate
    ThisWorkbook.Sheets("Dashboard").Calculate
    
    ' Update status
    UpdateSystemStatus "Dashboard Refresh", Now
    
    Application.ScreenUpdating = True
    
    MsgBox "Dashboard refreshed successfully!", vbInformation, "Refresh Complete"
    
    Exit Sub
    
ErrorHandler:
    Application.ScreenUpdating = True
    MsgBox "Error updating dashboard: " & Err.Description, vbCritical, "Update Error"
End Sub

' ===================================================================
' MACRO: ValidateData
' PURPOSE: Perform data quality checks
' ===================================================================
Sub ValidateData()
    Dim wsData As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim errorCount As Long
    Dim errorMsg As String
    
    On Error GoTo ErrorHandler
    
    Set wsData = ThisWorkbook.Sheets("BiometricData")
    lastRow = wsData.Cells(wsData.Rows.Count, 1).End(xlUp).Row
    
    errorCount = 0
    errorMsg = "Data Validation Results:" & vbCrLf & vbCrLf
    
    ' Check for missing employee IDs
    For i = 2 To lastRow
        If wsData.Cells(i, 1).Value = "" Then
            errorCount = errorCount + 1
            errorMsg = errorMsg & "Row " & i & ": Missing Employee ID" & vbCrLf
        End If
    Next i
    
    ' Check for invalid dates
    For i = 2 To lastRow
        If wsData.Cells(i, 2).Value <> "" And Not IsDate(wsData.Cells(i, 2).Value) Then
            errorCount = errorCount + 1
            errorMsg = errorMsg & "Row " & i & ": Invalid Date" & vbCrLf
        End If
    Next i
    
    ' Check for missing clock times
    For i = 2 To lastRow
        If wsData.Cells(i, 1).Value <> "" Then
            If wsData.Cells(i, 3).Value = "" Or wsData.Cells(i, 4).Value = "" Then
                errorCount = errorCount + 1
                errorMsg = errorMsg & "Row " & i & ": Missing Clock-In/Out time" & vbCrLf
            End If
        End If
    Next i
    
    If errorCount = 0 Then
        MsgBox "Data validation passed! No errors found.", vbInformation, "Validation Complete"
    Else
        MsgBox errorMsg & vbCrLf & "Total Errors: " & errorCount, vbExclamation, "Validation Errors"
    End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error validating data: " & Err.Description, vbCritical, "Validation Error"
End Sub

' ===================================================================
' MACRO: RefreshAllData
' PURPOSE: Complete system refresh
' ===================================================================
Sub RefreshAllData()
    On Error GoTo ErrorHandler
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationAutomatic
    
    ' Recalculate all sheets
    ThisWorkbook.Sheets("BiometricData").Calculate
    ThisWorkbook.Sheets("Settings").Calculate
    ThisWorkbook.Sheets("Calculations").Calculate
    ThisWorkbook.Sheets("Dashboard").Calculate
    
    ' Update control panel status
    UpdateSystemStatus "Complete Refresh", Now
    
    Application.ScreenUpdating = True
    
    MsgBox "Complete system refresh finished!", vbInformation, "Refresh Complete"
    
    Exit Sub
    
ErrorHandler:
    Application.ScreenUpdating = True
    MsgBox "Error refreshing system: " & Err.Description, vbCritical, "Refresh Error"
End Sub

' ===================================================================
' HELPER: UpdateSystemStatus
' PURPOSE: Update system status on Control Panel
' ===================================================================
Private Sub UpdateSystemStatus(action As String, timestamp As Date)
    Dim wsControl As Worksheet
    
    On Error Resume Next
    Set wsControl = ThisWorkbook.Sheets("ControlPanel")
    
    If Not wsControl Is Nothing Then
        Select Case action
            Case "Data Upload"
                wsControl.Range("C25").Value = Format(timestamp, "DD-MMM-YYYY HH:MM")
                wsControl.Range("C26").Value = ThisWorkbook.Sheets("BiometricData").Cells(Rows.Count, 1).End(xlUp).Row - 1
            Case "Dashboard Refresh", "Complete Refresh"
                wsControl.Range("C27").Value = Format(timestamp, "DD-MMM-YYYY HH:MM")
        End Select
    End If
    
    On Error GoTo 0
End Sub

' ===================================================================
' END OF VBA CODE
' ===================================================================

' ===================================================================
' PAYMENT & PAYROLL MACROS
' Added for Corporate-Grade Management System
' ===================================================================

' ===================================================================
' MACRO: GeneratePayrollReport
' PURPOSE: Generate comprehensive payroll report for selected period
' ===================================================================
Sub GeneratePayrollReport()
    Dim wsPayroll As Worksheet
    Dim wsReport As Worksheet
    Dim startDate As Date
    Dim endDate As Date
    Dim lastRow As Long
    Dim reportRow As Long
    Dim i As Long
    
    On Error GoTo ErrorHandler
    
    ' Get date range from user
    startDate = InputBox("Enter start date (MM/DD/YYYY):", "Payroll Report", Format(Date - 30, "MM/DD/YYYY"))
    If startDate = 0 Then Exit Sub
    
    endDate = InputBox("Enter end date (MM/DD/YYYY):", "Payroll Report", Format(Date, "MM/DD/YYYY"))
    If endDate = 0 Then Exit Sub
    
    ' Set reference to sheets
    Set wsPayroll = ThisWorkbook.Sheets("Payroll")
    
    ' Create or clear report sheet
    On Error Resume Next
    Set wsReport = ThisWorkbook.Sheets("PayrollReport")
    If wsReport Is Nothing Then
        Set wsReport = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsReport.Name = "PayrollReport"
    Else
        wsReport.Cells.Clear
    End If
    On Error GoTo ErrorHandler
    
    ' Create report header
    With wsReport
        .Range("A1").Value = "PAYROLL REPORT"
        .Range("A1").Font.Size = 16
        .Range("A1").Font.Bold = True
        
        .Range("A2").Value = "Period: " & Format(startDate, "DD-MMM-YYYY") & " to " & Format(endDate, "DD-MMM-YYYY")
        .Range("A3").Value = "Generated: " & Format(Now, "DD-MMM-YYYY HH:MM")
        
        ' Column headers
        reportRow = 5
        .Cells(reportRow, 1).Value = "Employee ID"
        .Cells(reportRow, 2).Value = "Department"
        .Cells(reportRow, 3).Value = "Total Hours"
        .Cells(reportRow, 4).Value = "Regular Hours"
        .Cells(reportRow, 5).Value = "Overtime Hours"
        .Cells(reportRow, 6).Value = "Night Hours"
        .Cells(reportRow, 7).Value = "Gross Pay"
        .Cells(reportRow, 8).Value = "Deductions"
        .Cells(reportRow, 9).Value = "Net Pay"
        
        ' Format headers
        With .Range(.Cells(reportRow, 1), .Cells(reportRow, 9))
            .Font.Bold = True
            .Interior.Color = RGB(68, 114, 196)
            .Font.Color = RGB(255, 255, 255)
        End With
    End With
    
    ' Copy filtered data
    reportRow = reportRow + 1
    lastRow = wsPayroll.Cells(Rows.Count, 1).End(xlUp).Row
    
    For i = 2 To lastRow
        Dim recordDate As Date
        recordDate = wsPayroll.Cells(i, 2).Value
        
        If recordDate >= startDate And recordDate <= endDate Then
            wsReport.Cells(reportRow, 1).Value = wsPayroll.Cells(i, 1).Value  ' Employee ID
            wsReport.Cells(reportRow, 2).Value = wsPayroll.Cells(i, 3).Value  ' Department
            wsReport.Cells(reportRow, 3).Value = wsPayroll.Cells(i, 4).Value + wsPayroll.Cells(i, 5).Value  ' Total Hours
            wsReport.Cells(reportRow, 4).Value = wsPayroll.Cells(i, 4).Value  ' Regular Hours
            wsReport.Cells(reportRow, 5).Value = wsPayroll.Cells(i, 5).Value  ' Overtime Hours
            wsReport.Cells(reportRow, 6).Value = wsPayroll.Cells(i, 6).Value  ' Night Hours
            wsReport.Cells(reportRow, 7).Value = wsPayroll.Cells(i, 11).Value ' Gross Pay
            wsReport.Cells(reportRow, 8).Value = wsPayroll.Cells(i, 15).Value ' Deductions
            wsReport.Cells(reportRow, 9).Value = wsPayroll.Cells(i, 16).Value ' Net Pay
            
            reportRow = reportRow + 1
        End If
    Next i
    
    ' Add totals row
    If reportRow > 6 Then
        With wsReport
            .Cells(reportRow, 1).Value = "TOTAL"
            .Cells(reportRow, 1).Font.Bold = True
            .Cells(reportRow, 3).Formula = "=SUM(C6:C" & reportRow - 1 & ")"
            .Cells(reportRow, 4).Formula = "=SUM(D6:D" & reportRow - 1 & ")"
            .Cells(reportRow, 5).Formula = "=SUM(E6:E" & reportRow - 1 & ")"
            .Cells(reportRow, 6).Formula = "=SUM(F6:F" & reportRow - 1 & ")"
            .Cells(reportRow, 7).Formula = "=SUM(G6:G" & reportRow - 1 & ")"
            .Cells(reportRow, 8).Formula = "=SUM(H6:H" & reportRow - 1 & ")"
            .Cells(reportRow, 9).Formula = "=SUM(I6:I" & reportRow - 1 & ")"
            
            ' Format totals row
            .Range(.Cells(reportRow, 1), .Cells(reportRow, 9)).Font.Bold = True
            .Range(.Cells(reportRow, 1), .Cells(reportRow, 9)).Interior.Color = RGB(217, 217, 217)
        End With
    End If
    
    ' Auto-fit columns
    wsReport.Columns("A:I").AutoFit
    
    ' Activate report sheet
    wsReport.Activate
    
    MsgBox "Payroll report generated successfully!" & vbCrLf & _
           "Records: " & (reportRow - 6), vbInformation, "Report Complete"
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error generating payroll report: " & Err.Description, vbCritical, "Error"
End Sub

' ===================================================================
' MACRO: ExportPayrollToCSV
' PURPOSE: Export payroll data to CSV for external systems
' ===================================================================
Sub ExportPayrollToCSV()
    Dim wsPayroll As Worksheet
    Dim filePath As String
    Dim fileNum As Integer
    Dim lastRow As Long
    Dim i As Long
    Dim j As Long
    Dim exportLine As String
    
    On Error GoTo ErrorHandler
    
    Set wsPayroll = ThisWorkbook.Sheets("Payroll")
    
    ' Get save location from user
    filePath = Application.GetSaveAsFilename( _
        InitialFileName:="Payroll_Export_" & Format(Date, "YYYYMMDD") & ".csv", _
        fileFilter:="CSV Files (*.csv), *.csv", _
        Title:="Export Payroll Data")
    
    If filePath = "False" Then Exit Sub
    
    ' Open file for output
    fileNum = FreeFile
    Open filePath For Output As #fileNum
    
    ' Write header row
    lastRow = wsPayroll.Cells(Rows.Count, 1).End(xlUp).Row
    exportLine = ""
    For j = 1 To 16  ' All columns in Payroll sheet
        If j > 1 Then exportLine = exportLine & ","
        exportLine = exportLine & Chr(34) & wsPayroll.Cells(1, j).Value & Chr(34)
    Next j
    Print #fileNum, exportLine
    
    ' Write data rows
    For i = 2 To lastRow
        If wsPayroll.Cells(i, 1).Value <> "" Then
            exportLine = ""
            For j = 1 To 16
                If j > 1 Then exportLine = exportLine & ","
                exportLine = exportLine & Chr(34) & wsPayroll.Cells(i, j).Value & Chr(34)
            Next j
            Print #fileNum, exportLine
        End If
    Next i
    
    Close #fileNum
    
    MsgBox "Payroll data exported successfully!" & vbCrLf & _
           "File: " & filePath & vbCrLf & _
           "Records: " & (lastRow - 1), vbInformation, "Export Complete"
    
    Exit Sub
    
ErrorHandler:
    Close #fileNum
    MsgBox "Error exporting payroll data: " & Err.Description, vbCritical, "Error"
End Sub

' ===================================================================
' MACRO: GenerateEmployeePayslip
' PURPOSE: Generate individual payslip for an employee
' ===================================================================
Sub GenerateEmployeePayslip()
    Dim wsPayroll As Worksheet
    Dim wsPayslip As Worksheet
    Dim employeeID As String
    Dim startDate As Date
    Dim endDate As Date
    Dim lastRow As Long
    Dim i As Long
    Dim payslipRow As Long
    Dim totalGross As Double
    Dim totalDeductions As Double
    Dim totalNet As Double
    
    On Error GoTo ErrorHandler
    
    ' Get employee ID from user
    employeeID = InputBox("Enter Employee ID:", "Generate Payslip", "E001")
    If employeeID = "" Then Exit Sub
    
    ' Get date range
    startDate = InputBox("Enter start date (MM/DD/YYYY):", "Payslip Period", Format(Date - 30, "MM/DD/YYYY"))
    If startDate = 0 Then Exit Sub
    
    endDate = InputBox("Enter end date (MM/DD/YYYY):", "Payslip Period", Format(Date, "MM/DD/YYYY"))
    If endDate = 0 Then Exit Sub
    
    Set wsPayroll = ThisWorkbook.Sheets("Payroll")
    
    ' Create or clear payslip sheet
    On Error Resume Next
    Set wsPayslip = ThisWorkbook.Sheets("Payslip_" & employeeID)
    If wsPayslip Is Nothing Then
        Set wsPayslip = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsPayslip.Name = "Payslip_" & employeeID
    Else
        wsPayslip.Cells.Clear
    End If
    On Error GoTo ErrorHandler
    
    ' Create payslip header
    With wsPayslip
        .Range("A1").Value = "EMPLOYEE PAYSLIP"
        .Range("A1").Font.Size = 18
        .Range("A1").Font.Bold = True
        .Range("A1:F1").Merge
        
        .Range("A3").Value = "Employee ID:"
        .Range("B3").Value = employeeID
        .Range("A4").Value = "Period:"
        .Range("B4").Value = Format(startDate, "DD-MMM-YYYY") & " to " & Format(endDate, "DD-MMM-YYYY")
        .Range("A5").Value = "Generated:"
        .Range("B5").Value = Format(Now, "DD-MMM-YYYY HH:MM")
        
        ' Payment details header
        payslipRow = 7
        .Cells(payslipRow, 1).Value = "EARNINGS"
        .Cells(payslipRow, 1).Font.Bold = True
        .Cells(payslipRow, 1).Interior.Color = RGB(112, 173, 71)
        .Range("A" & payslipRow & ":C" & payslipRow).Merge
        
        payslipRow = payslipRow + 1
        .Cells(payslipRow, 1).Value = "Description"
        .Cells(payslipRow, 2).Value = "Hours"
        .Cells(payslipRow, 3).Value = "Amount"
        .Range("A" & payslipRow & ":C" & payslipRow).Font.Bold = True
    End With
    
    ' Initialize totals
    totalGross = 0
    totalDeductions = 0
    totalNet = 0
    
    Dim totalRegHours As Double, totalOTHours As Double, totalNightHours As Double
    Dim totalBasePay As Double, totalOTPay As Double, totalNightPay As Double
    
    ' Collect data from payroll sheet
    lastRow = wsPayroll.Cells(Rows.Count, 1).End(xlUp).Row
    For i = 2 To lastRow
        If wsPayroll.Cells(i, 1).Value = employeeID Then
            Dim recordDate As Date
            recordDate = wsPayroll.Cells(i, 2).Value
            
            If recordDate >= startDate And recordDate <= endDate Then
                totalRegHours = totalRegHours + wsPayroll.Cells(i, 4).Value
                totalOTHours = totalOTHours + wsPayroll.Cells(i, 5).Value
                totalNightHours = totalNightHours + wsPayroll.Cells(i, 6).Value
                totalBasePay = totalBasePay + wsPayroll.Cells(i, 7).Value
                totalOTPay = totalOTPay + wsPayroll.Cells(i, 8).Value
                totalNightPay = totalNightPay + wsPayroll.Cells(i, 9).Value
                totalGross = totalGross + wsPayroll.Cells(i, 11).Value
                totalDeductions = totalDeductions + wsPayroll.Cells(i, 15).Value
                totalNet = totalNet + wsPayroll.Cells(i, 16).Value
            End If
        End If
    Next i
    
    ' Add earnings details
    payslipRow = payslipRow + 1
    With wsPayslip
        .Cells(payslipRow, 1).Value = "Regular Pay"
        .Cells(payslipRow, 2).Value = totalRegHours
        .Cells(payslipRow, 3).Value = totalBasePay
        .Cells(payslipRow, 3).NumberFormat = "$#,##0.00"
        
        payslipRow = payslipRow + 1
        .Cells(payslipRow, 1).Value = "Overtime Pay"
        .Cells(payslipRow, 2).Value = totalOTHours
        .Cells(payslipRow, 3).Value = totalOTPay
        .Cells(payslipRow, 3).NumberFormat = "$#,##0.00"
        
        payslipRow = payslipRow + 1
        .Cells(payslipRow, 1).Value = "Night Shift Allowance"
        .Cells(payslipRow, 2).Value = totalNightHours
        .Cells(payslipRow, 3).Value = totalNightPay
        .Cells(payslipRow, 3).NumberFormat = "$#,##0.00"
        
        payslipRow = payslipRow + 1
        .Cells(payslipRow, 1).Value = "GROSS PAY"
        .Cells(payslipRow, 1).Font.Bold = True
        .Cells(payslipRow, 3).Value = totalGross
        .Cells(payslipRow, 3).Font.Bold = True
        .Cells(payslipRow, 3).NumberFormat = "$#,##0.00"
        
        ' Deductions section
        payslipRow = payslipRow + 2
        .Cells(payslipRow, 1).Value = "DEDUCTIONS"
        .Cells(payslipRow, 1).Font.Bold = True
        .Cells(payslipRow, 1).Interior.Color = RGB(255, 192, 0)
        .Range("A" & payslipRow & ":C" & payslipRow).Merge
        
        payslipRow = payslipRow + 1
        .Cells(payslipRow, 1).Value = "Total Deductions"
        .Cells(payslipRow, 3).Value = totalDeductions
        .Cells(payslipRow, 3).NumberFormat = "$#,##0.00"
        
        ' Net pay
        payslipRow = payslipRow + 2
        .Cells(payslipRow, 1).Value = "NET PAY"
        .Cells(payslipRow, 1).Font.Size = 14
        .Cells(payslipRow, 1).Font.Bold = True
        .Cells(payslipRow, 3).Value = totalNet
        .Cells(payslipRow, 3).Font.Size = 14
        .Cells(payslipRow, 3).Font.Bold = True
        .Cells(payslipRow, 3).NumberFormat = "$#,##0.00"
        .Cells(payslipRow, 1).Interior.Color = RGB(68, 114, 196)
        .Cells(payslipRow, 3).Interior.Color = RGB(68, 114, 196)
        
        ' Auto-fit columns
        .Columns("A:C").AutoFit
    End With
    
    ' Activate payslip sheet
    wsPayslip.Activate
    
    MsgBox "Payslip generated for " & employeeID & vbCrLf & _
           "Period: " & Format(startDate, "DD-MMM-YYYY") & " to " & Format(endDate, "DD-MMM-YYYY") & vbCrLf & _
           "Net Pay: $" & Format(totalNet, "#,##0.00"), vbInformation, "Payslip Complete"
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error generating payslip: " & Err.Description, vbCritical, "Error"
End Sub

' ===================================================================
' MACRO: ValidatePayrollData
' PURPOSE: Validate payroll calculations and flag anomalies
' ===================================================================
Sub ValidatePayrollData()
    Dim wsPayroll As Worksheet
    Dim wsValidation As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim validationRow As Long
    Dim errorCount As Long
    
    On Error GoTo ErrorHandler
    
    Set wsPayroll = ThisWorkbook.Sheets("Payroll")
    
    ' Create or clear validation sheet
    On Error Resume Next
    Set wsValidation = ThisWorkbook.Sheets("PayrollValidation")
    If wsValidation Is Nothing Then
        Set wsValidation = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsValidation.Name = "PayrollValidation"
    Else
        wsValidation.Cells.Clear
    End If
    On Error GoTo ErrorHandler
    
    ' Create validation report header
    With wsValidation
        .Range("A1").Value = "PAYROLL VALIDATION REPORT"
        .Range("A1").Font.Size = 14
        .Range("A1").Font.Bold = True
        
        .Range("A2").Value = "Generated: " & Format(Now, "DD-MMM-YYYY HH:MM")
        
        validationRow = 4
        .Cells(validationRow, 1).Value = "Employee ID"
        .Cells(validationRow, 2).Value = "Date"
        .Cells(validationRow, 3).Value = "Issue Type"
        .Cells(validationRow, 4).Value = "Description"
        
        .Range("A" & validationRow & ":D" & validationRow).Font.Bold = True
        .Range("A" & validationRow & ":D" & validationRow).Interior.Color = RGB(255, 192, 0)
    End With
    
    validationRow = validationRow + 1
    errorCount = 0
    
    ' Perform validations
    lastRow = wsPayroll.Cells(Rows.Count, 1).End(xlUp).Row
    
    For i = 2 To lastRow
        If wsPayroll.Cells(i, 1).Value <> "" Then
            ' Check for negative values
            If wsPayroll.Cells(i, 16).Value < 0 Then  ' Net Pay
                wsValidation.Cells(validationRow, 1).Value = wsPayroll.Cells(i, 1).Value
                wsValidation.Cells(validationRow, 2).Value = wsPayroll.Cells(i, 2).Value
                wsValidation.Cells(validationRow, 3).Value = "Negative Net Pay"
                wsValidation.Cells(validationRow, 4).Value = "Net pay is negative: $" & Format(wsPayroll.Cells(i, 16).Value, "#,##0.00")
                validationRow = validationRow + 1
                errorCount = errorCount + 1
            End If
            
            ' Check for excessive overtime (>20 hours per day)
            If wsPayroll.Cells(i, 5).Value > 20 Then
                wsValidation.Cells(validationRow, 1).Value = wsPayroll.Cells(i, 1).Value
                wsValidation.Cells(validationRow, 2).Value = wsPayroll.Cells(i, 2).Value
                wsValidation.Cells(validationRow, 3).Value = "Excessive Overtime"
                wsValidation.Cells(validationRow, 4).Value = "Overtime hours: " & wsPayroll.Cells(i, 5).Value
                validationRow = validationRow + 1
                errorCount = errorCount + 1
            End If
            
            ' Check if deductions exceed gross pay
            If wsPayroll.Cells(i, 15).Value > wsPayroll.Cells(i, 11).Value Then
                wsValidation.Cells(validationRow, 1).Value = wsPayroll.Cells(i, 1).Value
                wsValidation.Cells(validationRow, 2).Value = wsPayroll.Cells(i, 2).Value
                wsValidation.Cells(validationRow, 3).Value = "Deductions > Gross"
                wsValidation.Cells(validationRow, 4).Value = "Deductions exceed gross pay"
                validationRow = validationRow + 1
                errorCount = errorCount + 1
            End If
        End If
    Next i
    
    ' Add summary
    If errorCount = 0 Then
        wsValidation.Cells(validationRow + 1, 1).Value = "✓ No issues found. Payroll data is valid."
        wsValidation.Cells(validationRow + 1, 1).Font.Color = RGB(0, 128, 0)
        wsValidation.Cells(validationRow + 1, 1).Font.Bold = True
    Else
        wsValidation.Cells(validationRow + 1, 1).Value = "⚠ " & errorCount & " issues found. Please review."
        wsValidation.Cells(validationRow + 1, 1).Font.Color = RGB(255, 0, 0)
        wsValidation.Cells(validationRow + 1, 1).Font.Bold = True
    End If
    
    ' Auto-fit columns
    wsValidation.Columns("A:D").AutoFit
    
    ' Activate validation sheet
    wsValidation.Activate
    
    MsgBox "Payroll validation complete!" & vbCrLf & _
           "Issues found: " & errorCount, vbInformation, "Validation Complete"
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error validating payroll data: " & Err.Description, vbCritical, "Error"
End Sub

' ===================================================================
' MACRO: UpdatePayrollCalculations
' PURPOSE: Recalculate all payroll formulas and refresh data
' ===================================================================
Sub UpdatePayrollCalculations()
    Dim wsPayroll As Worksheet
    Dim wsCalc As Worksheet
    Dim wsDash As Worksheet
    
    On Error GoTo ErrorHandler
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    ' Force calculation refresh
    Set wsPayroll = ThisWorkbook.Sheets("Payroll")
    Set wsCalc = ThisWorkbook.Sheets("Calculations")
    Set wsDash = ThisWorkbook.Sheets("Dashboard")
    
    wsCalc.Calculate
    wsPayroll.Calculate
    wsDash.Calculate
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    
    UpdateSystemStatus "Payroll Update", Now
    
    MsgBox "Payroll calculations updated successfully!", vbInformation, "Update Complete"
    
    Exit Sub
    
ErrorHandler:
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    MsgBox "Error updating payroll: " & Err.Description, vbCritical, "Error"
End Sub

' ===================================================================
' END OF PAYMENT & PAYROLL MACROS
' ===================================================================
